//===----------------------------------------------------------------------===//
//
// Copyright 2021-2022 The PolyAIE Authors.
//
//===----------------------------------------------------------------------===//

#include "mlir/Dialect/Vector/VectorOps.h"
#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
#include "polyaie/Transforms/Passes.h"

using namespace mlir;
using namespace polyaie;
using namespace dataflow;
using namespace xilinx::AIE;

namespace {
struct Postprocess : public polyaie::PostprocessBase<Postprocess> {
  void runOnOperation() override;
};
} // namespace

void Postprocess::runOnOperation() {
  auto mod = getOperation();
  auto b = OpBuilder(mod);
  auto loc = b.getUnknownLoc();

  // Traverse all operations.
  unsigned bufIdx = 0;
  for (auto &op : llvm::make_early_inc_range(mod.getBody()->getOperations())) {
    if (auto buf = dyn_cast<BufferOp>(op)) {
      // Create symbol name for each BufferOp.
      auto bufName = "buf" + std::to_string(bufIdx++);
      buf->setAttr("sym_name", b.getStringAttr(bufName));

    } else if (auto externBuf = dyn_cast<ExternalBufferOp>(op)) {
      // Create symbol name for each ExternalBufferOp.
      auto bufName = "buf" + std::to_string(bufIdx++);
      externBuf->setAttr("sym_name", b.getStringAttr(bufName));

    } else if (auto constant = dyn_cast<arith::ConstantOp>(op)) {
      // Localize constant operation to the usage block.
      for (auto &use : llvm::make_early_inc_range(constant->getUses())) {
        b.setInsertionPoint(use.getOwner());
        auto localConstant = cast<arith::ConstantOp>(b.clone(*constant));
        use.set(localConstant.getResult());
      }
      constant.erase();

    } else if (auto switchBox = dyn_cast<SwitchboxOp>(op)) {
      // Remove empty switch boxes.
      if (&switchBox.getBody()->front() ==
          switchBox.getBody()->getTerminator()) {
        switchBox->dropAllUses();
        switchBox->erase();
      }
    } else if (auto shimMux = dyn_cast<ShimMuxOp>(op)) {
      // Remove empty shim muxes.
      if (&shimMux.getBody()->front() == shimMux.getBody()->getTerminator()) {
        shimMux->dropAllUses();
        shimMux->erase();
      }
    } else if (auto lock = dyn_cast<LockOp>(op)) {
      // Remove locks that all users share the same parent operation.
      // TODO: Verify whether this is safe.
      auto parent = lock->user_begin()->getParentOp();
      if (llvm::all_of(lock->getUsers(), [&](Operation *user) {
            return user->getParentOp() == parent;
          })) {
        for (auto user : lock->getUsers())
          user->erase();
        lock->erase();
      }
    } else if (auto func = dyn_cast<mlir::FuncOp>(op)) {
      if (!func.isPrivate() && llvm::hasSingleElement(func.front()))
        func.erase();

    } else if (isa<TokenOp, WireOp, PLIOOp>(op)) {
      // Remove the temporary operations generated by PolyAIE or MLIR-AIE and
      // operations that are converted.
      op.dropAllUses();
      op.erase();
    }
  }

  // Create lock releases to leaf tiles in order to indicate the completion of
  // the program. Also, remove unused tiles.
  for (auto tile : llvm::make_early_inc_range(mod.getOps<TileOp>())) {
    if (tile.result().use_empty())
      tile.erase();
    else if (tile->hasAttr("polyaie.leaf")) {
      b.setInsertionPointAfter(tile);
      auto lock = b.create<LockOp>(loc, tile, 15);
      b.setInsertionPoint(tile.getCoreOp().body().front().getTerminator());
      auto useLock = b.create<UseLockOp>(loc, lock, 1, LockAction::Release);
      // TODO: How to implement this?
      useLock->setAttr("polyaie.runtime", b.getUnitAttr());
    }
  }
}

std::unique_ptr<Pass> polyaie::createPostprocessPass() {
  return std::make_unique<Postprocess>();
}
