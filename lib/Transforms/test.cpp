//===----------------------------------------------------------------------===//
//
// Copyright 2021-2022 The PolyAIE Authors.
//
//===----------------------------------------------------------------------===//

#include "polyaie/Transforms/Passes.h"
#include "polyaie/Utils.h"

using namespace mlir;
using namespace polyaie;
using namespace dataflow;
using namespace xilinx::AIE;

namespace {
struct Test : public polyaie::TestBase<Test> {
  void runOnOperation() override;
};
} // namespace

void Test::runOnOperation() {
  auto mod = getOperation();
  auto b = OpBuilder(mod);
  auto loc = b.getUnknownLoc();
  for (auto &op : llvm::make_early_inc_range(mod.getBody()->getOperations())) {
    if (!(isa<TileOp, LockOp>(op))) {
      // Remove the temporary operations generated by PolyAIE or MLIR-AIE and
      // operations that are converted.
      op.dropAllUses();
      op.erase();
    }
  }
  for (auto &op : mod.getBody()->getOperations()) {
    if (auto lock = dyn_cast<LockOp>(op)) {
      b.setInsertionPointAfter(lock);
      b.create<UseLockOp>(loc, lock, 0, LockAction::Release);
    }
  }
}

std::unique_ptr<Pass> polyaie::createTestpass() {
  return std::make_unique<Test>();
}
