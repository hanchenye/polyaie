//===----------------------------------------------------------------------===//
//
// Copyright 2021-2021 The PolyAIE Authors.
//
//===----------------------------------------------------------------------===//

#ifndef POLYAIE_PASSES_TD
#define POLYAIE_PASSES_TD

include "mlir/Pass/PassBase.td"

def Preprocess : Pass<"polyaie-preprocess", "ModuleOp"> {
  let summary = "Preprocess the affine-level IR";
  let description = [{
    Erase contant arguments, unroll all loops, duplicate all sub-functions in
    the top function, bufferize all scalars to single-element memrefs, inline
    top function, and eliminate redundant sub-functions.
  }];

  let options = [
    Option<"topFuncName", "top-func-name", "std::string",
           /*default=*/"\"main\"", "Specify the top function of the program">
  ];

  let constructor = "mlir::polyaie::createPreprocessPass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "mlir::LLVM::LLVMDialect"
  ];
}

def ReduceBufferSize : Pass<"polyaie-reduce-buffer-size", "ModuleOp"> {
  let summary = "Reduce the buffer size based on loop analysis";
  let description = [{
    Through loop analysis, this pass can identify the memory partition that each
    function has accessed. In this way, the size of memories passed to each
    function can be reduced in order to save local buffer consumption.
  }];

  let constructor = "mlir::polyaie::createReduceBufferSizePass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "mlir::polyaie::memrefext::MemRefExtDialect"
  ];
}

def CreateDataflow : Pass<"polyaie-create-dataflow", "ModuleOp"> {
  let summary = "Extract the depedencies and create dataflow";
  let description = [{
    Extract the dependencies between different function calls through memory
    access analysis. Then, create a dataflow based on the dependencies.
  }];

  let constructor = "mlir::polyaie::createCreateDataflowPass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "mlir::polyaie::memrefext::MemRefExtDialect"
  ];
}

def PrintDataflow : Pass<"polyaie-print-dataflow", "ModuleOp"> {
  let summary = "Print dataflow";
  let description = [{
    Print the call operations' dataflow graph of the module.
  }];

  let constructor = "mlir::polyaie::createPrintDataflowPass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "mlir::polyaie::memrefext::MemRefExtDialect"
  ];
}

def Placement : Pass<"polyaie-placement", "ModuleOp"> {
  let summary = "Place function calls to a physical location";
  let description = [{
    Find a physical location for each function call in the module using the
    given strategy. Buffer size and routing distance (adjacent/non-adjacent) are
    considered in wirestrength.
  }];

  let options = [
    Option<"algorithm", "algorithm", "std::string",
           /*default=*/"\"naive\"", "Specify the placement algorithm, possible "
           "values are: naive(default), simulated-annealing">
  ];

  let constructor = "mlir::polyaie::createPlacementPass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "mlir::polyaie::memrefext::MemRefExtDialect"
  ];
}

def ConvertToAIE : Pass<"polyaie-convert-to-aie", "ModuleOp"> {
  let summary = "Convert to the logical-level IR of AIE";
  let description = [{
    Lower function calls to AIE tiles and cores, create local buffers, create
    MemOp and FlowOp to implement the dependencies between AIE tiles, lower
    buffer load and store operations.
  }];

  let constructor = "mlir::polyaie::createConvertToAIEPass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "xilinx::AIE::AIEDialect"
  ];
}

def SimplifyTokens : Pass<"polyaie-simplify-tokens", "ModuleOp"> {
  let summary = "Simplify token uses in the IR";
  let description = [{
    Remove redundant token release or acquires.
  }];

  let constructor = "mlir::polyaie::createSimplifyTokensPass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "xilinx::AIE::AIEDialect"
  ];
}

def Postprocess : Pass<"polyaie-postprocess", "ModuleOp"> {
  let summary = "Postprocess the AIE-level IR";
  let description = [{
    Constant localization, remove redundant operations generated by PolyAIE or
    MLIR-AIE.
  }];

  let constructor = "mlir::polyaie::createPostprocessPass()";

  let dependentDialects = [
    "mlir::AffineDialect", "mlir::StandardOpsDialect",
    "mlir::memref::MemRefDialect", "mlir::vector::VectorDialect",
    "xilinx::AIE::AIEDialect"
  ];
}

#endif // POLYAIE_PASSES_TD
