//===----------------------------------------------------------------------===//
//
// Copyright 2021-2022 The PolyAIE Authors.
//
//===----------------------------------------------------------------------===//

#ifndef POLYAIE_DATAFLOW_DATAFLOW_TD
#define POLYAIE_DATAFLOW_DATAFLOW_TD

include "mlir/IR/OpBase.td"

def DataflowDialect : Dialect {
  let name = "dataflow";
  let summary = "A extension of the MLIR MemRef dialect";
  let description = [{
    This dialect contains operations and attributes that are useful in the
    PolyAIE compilation flow.
  }];
  let cppNamespace = "::mlir::polyaie::dataflow";
}

class DataflowOp<string mnemonic, list<OpTrait> traits = []> :
    Op<DataflowDialect, mnemonic, traits>;

//===----------------------------------------------------------------------===//
// Process-related Operation
//===----------------------------------------------------------------------===//

def ProcessOp : DataflowOp<"process", []> {
  let summary = "process operation";
  let description = [{
    This operation represents a process in a dataflow graph.
  }];

  let arguments = (ins Variadic<AnyType>:$operands);
  let results = (outs Variadic<AnyType>:$results);
  let regions = (region AnyRegion:$body);

  let skipDefaultBuilders = 1;
  let builders =[
    OpBuilder<(ins "TypeRange":$resultTypes, "ValueRange":$operands)>
  ];

  let verifier = "return ::verify(*this);";

  let extraClassDeclaration = [{
    /// Given an internal value, return the corresponding process operand. If
    /// the internal value is not a block argument, return nullptr.
    Value getOperandFromInternalVal(Value internalVal);

    /// Given an internal value, return the corresponding process result. If the
    /// internal value is not returned as a result, return nullptr.
    Value getResultFromInternalVal(Value internalVal);

    /// Given a process operand, return the corresponding block argument.
    Value getArgumentFromOperand(OpOperand &operand);

    /// Given a process result, return the corresponding returned value.
    Value getReturnValFromResult(OpResult result);
  }];
}

def ReturnOp : DataflowOp<"return", [HasParent<"ProcessOp">, Terminator]> {
  let summary = "return operation of a process";
  let description = [{
    The operation terminates a process region and returns values generated by
    the process operation.
  }];

  let arguments = (ins Variadic<AnyType>:$operands);

  let verifier = "return ::verify(*this);";
}

//===----------------------------------------------------------------------===//
// Tensor Load/Store Operation
//===----------------------------------------------------------------------===//

def TensorLoadOp : DataflowOp<"tensor_load",
    [SameOperandsAndResultElementType]> {
  let summary = "tensor load operation";
  let description = [{
    This operation loads a tensor from a memory.
  }];

  let arguments = (ins I64ArrayAttr:$offsets, I64ArrayAttr:$sizes,
                       I64ArrayAttr:$strides, AnyMemRef:$memory);
  let results = (outs AnyTensor:$tensor);

  let verifier = "return ::verify(*this);";
}

def TensorStoreOp : DataflowOp<"tensor_store", [SameOperandsElementType]> {
  let summary = "tensor store operation";
  let description = [{
    This operation stores a tensor to a memory.
  }];

  let arguments = (ins I64ArrayAttr:$offsets, I64ArrayAttr:$sizes,
                       I64ArrayAttr:$strides, AnyMemRef:$memory,
                       AnyTensor:$tensor);

  let verifier = "return ::verify(*this);";
}

//===----------------------------------------------------------------------===//
// Runtime Operation - should be factored out to a new dialect
//===----------------------------------------------------------------------===//

def HostToDDR:  I64EnumAttrCase<"HostToDDR", 0>;
def DDRToHost:  I64EnumAttrCase<"DDRToHost", 1>;
def DMAKind: I64EnumAttr<"DMAKind", "Kind of Host DMA",
    [HostToDDR, DDRToHost]> {
  let cppNamespace = "mlir::polyaie";
}

def HostDMAOp : DataflowOp<"runtime.host_dma", [SameOperandsElementType]> {
  let summary = "Host DMA operation";
  let description = [{
    This operation represents a host DMA to/from external memory, such as DDRs.
  }];

  let arguments = (ins I64ArrayAttr:$offsets, I64ArrayAttr:$sizes,
                       I64ArrayAttr:$strides, DMAKind:$kind, AnyMemRef:$target,
                       AnyMemRef:$source);

  let verifier = "return ::verify(*this);";
}

//===----------------------------------------------------------------------===//
// AIE Operation - should be factored out to AIE dialect
//===----------------------------------------------------------------------===//

def BroadcastOp : DataflowOp<"aie.broadcast", [SameTypeOperands]> {
  let summary = "Memory broadcast operation";
  let description = [{
    Broadcast the source buffer to each target buffer.
  }];

  let arguments = (ins AnyMemRef:$source, Variadic<AnyMemRef>:$targets);
}

//===----------------------------------------------------------------------===//
// Buffer Load/Store Operation
//===----------------------------------------------------------------------===//

def LoadBufferOp : DataflowOp<"load_buffer",
    [SameOperandsAndResultElementType]> {
  let summary = "load buffer operation";
  let description = [{
    This operation loads data from memory to buffer.
  }];

  let arguments = (ins I64ArrayAttr:$offsets, I64ArrayAttr:$lengths,
                       AnyMemRef:$memory);
  let results = (outs AnyMemRef:$buffer);

  let verifier = "return ::verify(*this);";
}

def StoreBufferOp : DataflowOp<"store_buffer", [SameOperandsElementType]> {
  let summary = "store buffer operation";
  let description = [{
    This operation stores data from buffer to memory.
  }];

  let arguments = (ins I64ArrayAttr:$offsets, I64ArrayAttr:$lengths,
                       AnyMemRef:$memory, AnyMemRef:$buffer);

  let verifier = "return ::verify(*this);";
}

//===----------------------------------------------------------------------===//
// General Memory Copy Operation
//===----------------------------------------------------------------------===//

def MemCpyOp : DataflowOp<"memcpy", [SameOperandsElementType]> {
  let summary = "memory copy operation";
  let description = [{
    This operation represents a general memory copy from source to target. All
    buffer operation (load/store) can be lowered to this operation.
  }];

  let arguments = (ins I64ArrayAttr:$targetOffsets, I64ArrayAttr:$sourceOffsets,
                       I64ArrayAttr:$lengths, AnyMemRef:$target,
                       AnyMemRef:$source);

  // let verifier = "return ::verify(*this);";
}

#endif // POLYAIE_DATAFLOW_DATAFLOW_TD
